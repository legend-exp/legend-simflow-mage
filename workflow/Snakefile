# Copyright (C) 2023 Luigi Pertoldi <gipert@pm.me>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pathlib import Path
from datetime import datetime

from dbetto import AttrsDict

from legenddataflowscripts.workflow import execenv, utils
from legendsimflow import patterns, aggregate, tier_evt
from legendmeta import LegendMetadata


if not config:
    raise RuntimeError("you must set a config file with --configfile")

config.setdefault("benchmark", {"enabled": False})
make_tiers = config.get("make_tiers", ["ver", "stp", "hit", "evt", "pdf"])
utils.subst_vars_in_snakemake_config(workflow, config)
config = AttrsDict(config)

proctime = datetime.now().strftime("%Y%m%dT%H%M%SZ")

# NOTE: this will attempt a clone of legend-metadata, if the directory does not exist
metadata = LegendMetadata(config.paths.metadata)
if "legend_metadata_version" in config:
    metadata.checkout(config.legend_metadata_version)


wildcard_constraints:
    tier=r"\w+",
    simid=r"[-\w]+",
    jobid=r"\d+",
    runid=r"[-\w]+",


onstart:
    print("INFO: starting workflow")

    # Make sure some packages are initialized before we begin to avoid race conditions
    # https://numba.readthedocs.io/en/stable/developer/caching.html#cache-sharing
    if not workflow.touch:
        shell(
            f"{execenv.execenv_pyexe(config, 'python')} "
            f"-c '{", ".join(config.precompile_pkg)}'"
        )


include: "rules/aux.smk"
include: "rules/common.smk"


for tier in make_tiers:

    include: f"rules/{tier}.smk"


rule all:
    default_target: True
    input:
        gen_target_all(),
